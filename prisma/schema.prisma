generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String                  @id
  username                String?                 @unique
  name                    String
  email                   String?                 @unique
  phone                   String?                 @unique
  gender                  String?
  dob                     DateTime?
  passwordHash            String?
  avatarUrl               String?
  country                 String?
  twoFactorEnabled        Boolean                 @default(false)
  onboardingCompleted     Boolean                 @default(false)
  email_verified          Boolean                 @default(false)
  role                    UserRole                @default(USER)
  sessions                Session[]
  email_verification_code emailVerificationCode[]
  resetTokens             passwordResetToken[]
  twoFactorAuth           twoFactorAuth[]
  device                  Device[]
  nairaAccount            NairaAccount? 
  transaction             Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  deviceId  String?

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  device Device? @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Device {
  id       String    @id @default(cuid())
  userId   String
  name     String
  type     String
  os       String
  sessions Session[]
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  lastUsedAt DateTime @updatedAt

  @@map("devices")
}

model emailVerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  email     String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_codes")
}

model passwordResetToken {
  id         String   @id @default(cuid())
  token_hash String
  userId     String
  expiresAt  DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reset_tokens")
}

model twoFactorAuth {
  id          String   @id @default(cuid())
  userId      String   @unique
  secret      String
  setupKey    String
  verified    Boolean  @default(false)
  backupCodes String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

model NairaAccount {
  id        String   @id @default(cuid())
  balance   Float    @default(0)
  currency  String[]   @default(["NGN", "â‚¦"])
  userId    String   @unique

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("naira_accounts")
}

model Transaction {
  id        String   @id @default(cuid())
  from      String
  to        String
  amount    Float
  currency  String
  txHash    String?  @unique
  status    String
  userId    String

  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}
